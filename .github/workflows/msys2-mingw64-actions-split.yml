# Workflow to compile Oolite and necessary dependencies

name: Build Oolite on MSYS2-MINGW64
on: 
  workflow_dispatch:
    inputs:
      run_tests:
        description: Run build tests
        required: false
        type: boolean
        default: false
      from_fresh:
        description: Build all dependencies from scratch
        required: false
        type: boolean
        default: false
      oolite_ref:
        description: The version of Oolite to build
        required: false
        type: string
        default: master
  pull_request:
  push:
    branches:
      - main
jobs:

########################################
########################################
########################################

# Build Oolite

  build-oolite:
    name: Build Oolite
    runs-on: windows-latest
    needs: [build-sdl]
    defaults:
      run:
        shell: msys2 {0}
    env:
      OOLITE_BUILD_MSYS2_DEPS:
    strategy:
      matrix:
        build_type: [debug, release, release-deployment, release-snapshot]
      fail-fast: false

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Load dependency data into env
        shell: bash
        run: |
          echo OOLITE_BUILD_MSYS2_DEPS=$(cat oolite-config/msys2-deps) >> $GITHUB_ENV

      - name: Set up msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.OOLITE_BUILD_MSYS2_DEPS }}

      - name: Retrieve SDL cache
        id: restore-sdl
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/msys2-mingw64-actions-split.yml', '**/deps/sdl/*') }}
          fail-on-cache-miss: true

      # NOTE: fail-on-cache-miss does not correctly fail the job. This is a workaround.
      # There is an open bug report for it here: https://github.com/actions/cache/issues/1265
      - name: Fail if cached data for SDL is missing
        if: steps.restore-sdl.outputs.cache-hit != 'true'
        run: echo "Unable to restore SDL files from previous job" && false

      - name: Install SDL
        run: |
          bash ./deps/sdl/install.sh

      - name: Checkout Oolite
        uses: actions/checkout@v4
        with:
          repository: OoliteProject/oolite
          path: oolite
          submodules: recursive
          ref: ${{ inputs.oolite_ref }}

      - name: Configure and build Oolite
        run: |
          bash ./oolite-config/build.sh ${{ matrix.build_type }}

      - name: Cache Oolite build
        uses: actions/cache/save@v4
        with:
          path: oolite
          key: cache-oolite-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.build_type }}

########################################

# Build the installers.

  build-oolite-installers:
    name: Build Oolite installers
    runs-on: windows-latest
    needs: [build-sdl, build-oolite, generate-pdfs]
    defaults:
      run:
        shell: msys2 {0}
    env:
      OOLITE_INSTALLER_BUILD_MSYS2_DEPS:
    strategy:
      matrix:
        build_type: [release, release-deployment, release-snapshot]
      fail-fast: false

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Load dependency data into env
        shell: bash
        run: |
          echo OOLITE_INSTALLER_BUILD_MSYS2_DEPS=$(cat oolite-installer-config/msys2-deps) >> $GITHUB_ENV

      - name: Set up msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.OOLITE_INSTALLER_BUILD_MSYS2_DEPS }}

      - name: Retrieve SDL cache
        id: restore-sdl
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/msys2-mingw64-actions-split.yml', '**/deps/sdl/*') }}
          fail-on-cache-miss: true

      # NOTE: fail-on-cache-miss does not correctly fail the job. This is a workaround.
      # There is an open bug report for it here: https://github.com/actions/cache/issues/1265
      - name: Fail if cached data for SDL is missing
        if: steps.restore-sdl.outputs.cache-hit != 'true'
        run: echo "Unable to restore SDL files from previous job" && false

      - name: Install SDL
        run: |
          bash ./deps/sdl/install.sh
          
      - name: Retrieve Oolite cache
        id: restore-oolite
        uses: actions/cache/restore@v4
        with:
          path: oolite
          key: cache-oolite-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.build_type }}
          fail-on-cache-miss: true

      # NOTE: fail-on-cache-miss does not correctly fail the job. This is a workaround.
      # There is an open bug report for it here: https://github.com/actions/cache/issues/1265
      - name: Fail if cached data for Oolite is missing
        if: steps.restore-oolite.outputs.cache-hit != 'true'
        run: echo "Unable to restore Oolite files from previous job" && false

      - name: Retrieve pdfs artifact
        uses: actions/download-artifact@v4
        with:
          name: pdfs
          path: oolite/Doc

      - name: Build installers
        run: |
          bash ./oolite-installer-config/build.sh ${{ matrix.build_type }}

      - name: Upload Oolite installers as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oolite-${{ matrix.build_type }}.exe
          path: |
            oolite/installers/win32/OoliteInstall*.exe

########################################
########################################
########################################

# Build the dependencies that need to be installed to build Oolite.

  build-sdl:
    name: Build SDL
    runs-on: windows-latest
    needs: [check-oolite-ref]
    defaults:
      run:
        shell: msys2 {0}
    env:
      SDL_VERSION:
      SDL_MSYS2_DEPS:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Load dependency data into env
        shell: bash
        run: |
          echo SDL_VERSION=$(cat deps/sdl/version) >> $GITHUB_ENV
          echo SDL_MSYS2_DEPS=$(cat deps/sdl/msys2-deps) >> $GITHUB_ENV

      - name: Check for pre-existing SDL cache
        id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/msys2-mingw64-actions-split.yml', '**/deps/sdl/*') }}
          lookup-only: true

      - name: Early exit if cache exists and not building from fresh
        id: early-exit
        if: ${{ inputs.from_fresh == false && steps.check-cache.outputs.cache-hit == 'true' }}
        shell: bash
        run: |
          echo "SDL cache exists, exiting early" >> $GITHUB_STEP_SUMMARY

      - name: Set up msys2
        if: steps.early-exit.conclusion != 'success'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.SDL_MSYS2_DEPS }}

      - name: Download and extract SDL
        if: steps.early-exit.conclusion != 'success'
        run: |
          wget ${{ env.SDL_VERSION }}
          tar -xf SDL-1.2.13.tar.gz

      - name: Configure and build SDL
        if: steps.early-exit.conclusion != 'success'
        run: |
          bash ./deps/sdl/build.sh

      - name: Delete pre-existing cache if building from fresh and it exists
        if: ${{ inputs.from_fresh == true && steps.check-cache.outputs.cache-hit == 'true' }}
        shell: bash
        run: |
          echo "Deleting pre-existing cache" >> $GITHUB_STEP_SUMMARY
          gh cache delete cache-sdl-${{ hashFiles('**/.github/workflows/msys2-mingw64-actions-split.yml', '**/deps/sdl/*') }}

      - name: Cache SDL build
        if: steps.early-exit.conclusion != 'success'
        uses: actions/cache/save@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/msys2-mingw64-actions-split.yml', '**/deps/sdl/*') }}

########################################
########################################
########################################

# Test the dependencies.
# These jobs only run if the build jobs have been successful and the run_tests input is true.

  test-sdl:
    name: Test SDL
    runs-on: windows-latest
    if: ${{ inputs.run_tests }}
    needs: [build-sdl]
    defaults:
      run:
        shell: msys2 {0}
    env:
      SDL_MSYS2_DEPS:

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Load dependency data into env
        shell: bash
        run: |
          echo SDL_MSYS2_DEPS=$(cat deps/sdl/msys2-deps) >> $GITHUB_ENV

      - name: Set up msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            ${{ env.SDL_MSYS2_DEPS }}

      - name: Retrieve SDL cache
        id: restore-sdl
        uses: actions/cache/restore@v4
        with:
          path: SDL-1.2.13
          key: cache-sdl-${{ hashFiles('**/.github/workflows/msys2-mingw64-actions-split.yml', '**/deps/sdl/*') }}
          fail-on-cache-miss: true

      # NOTE: fail-on-cache-miss does not correctly fail the job. This is a workaround.
      # There is an open bug report for it here: https://github.com/actions/cache/issues/1265
      - name: Fail if cached data for SDL is missing
        if: steps.restore-sdl.outputs.cache-hit != 'true'
        run: echo "Unable to restore SDL files from previous job" && false

      - name: Install SDL
        run: |
          bash ./deps/sdl/install.sh

      - name: Build SDL tests
        run: |
          cd SDL-1.2.13/test
          ./configure
          make -j $(nproc)

########################################
########################################
########################################

# Clear unnecessary caches on GitHub

  clear-oolite-caches:
    name: Clear Oolite caches
    runs-on: windows-latest
    if: always()
    needs: [build-oolite, build-oolite-installers]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: List all caches
        run: |
          gh cache list

      - name: List Oolite caches created by this workflow run
        run: |
          gh cache list | grep cache-oolite-${{ github.run_id }}-${{ github.run_attempt }} | awk '{print $2}' > cache-list.txt
          cat cache-list.txt

      - name: Delete Oolite caches created by this workflow run
        run: |
          foreach ($cache in Get-Content cache-list.txt) {
            echo $cache
            gh cache delete $cache
          }

      - name: List all remaining caches
        run: |
          gh cache list

########################################
########################################
########################################

# Single script to build Oolite from scratch

  build-oolite-from-fresh-msys2-mingw64:
    name: Test the from-fresh script
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        build_type: [debug, release, release-deployment, release-snapshot]
      fail-fast: false

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Set up msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true

      - name: Run build script with provided Oolite ref
        if: ${{ inputs.oolite_ref != '' }}
        run: |
          bash ./oolite-from-fresh-msys2-mingw64.sh -b ${{ matrix.build_type }} -r ${{ inputs.oolite_ref }}

      - name: Run build script with latest commit on Oolite master
        if: ${{ inputs.oolite_ref == '' }}
        run: |
          bash ./oolite-from-fresh-msys2-mingw64.sh -b ${{ matrix.build_type }}

########################################
########################################
########################################

# Run Shellcheck to lint the scripts

  shellcheck:
    name: Run ShellCheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

########################################
########################################
########################################

# Generate the PDFs of the Oolite documentation .odt files in the oolite/Doc/ folder

# TODO
# This currently runs every time the workflow is run.
# Ideally we would cache the generated pdfs and only regenerate them if the .odt files have changed.
# As it runs on ubuntu-latest we would set enableCrossOsArchive to true in the cache action.
# The cache key should include the hash of oolite/Doc/ and the hash of this workflow file.
# Unfortunately I cannot get the hash of either the oolite/Doc/ folder or the .odt files to match on both Ubuntu and Windows runners.
# I suspect that the line endings are different on the two systems, but have failed to find a way to fix this.

  generate-pdfs:
    name: Generate PDFs
    runs-on: ubuntu-latest
    needs: [check-oolite-ref]

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Checkout Oolite
        uses: actions/checkout@v4
        with:
          repository: OoliteProject/oolite
          path: oolite
          sparse-checkout: Doc
          ref: ${{ inputs.oolite_ref }}

      - name: Install LibreOffice and Fonts 
        run: |
          sudo apt update
          echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
          sudo apt -y install libreoffice ttf-mscorefonts-installer

      - name: Generate PDFs
        run: |
          find ./oolite/Doc -name "*.odt" -exec soffice --headless --convert-to pdf:"writer_pdf_Export" --outdir oolite/Doc {} \;

      - name: Store pdfs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pdfs
          path: ./oolite/Doc/*.pdf

########################################
########################################
########################################

  check-oolite-ref:
    name: Check Oolite ref is valid
    runs-on: ubuntu-latest

    steps:
      - name: Check if provided ref exists in Oolite repository (skip if ref is not provided and use the latest commit from the master branch)
        if: ${{ inputs.oolite_ref != '' }}
        run: |
          if git ls-remote --exit-code https://github.com/OoliteProject/oolite.git ${{ inputs.oolite_ref }}
          then
              echo "The reference ${{ inputs.oolite_ref }} exists in the remote repository."
          else
              echo "The reference ${{ inputs.oolite_ref }} does not exist in the remote repository." >&2
              exit 1
          fi

########################################
########################################
########################################
